#!/usr/bin/env php
<?php

require_once __DIR__ . '/vendor/autoload.php';

use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;

$finder = new Finder();
$fs     = new Filesystem();
$args   = $_SERVER['argv'];

if (count($args) != 2) {
    echo 'No subject provided', PHP_EOL;
    exit;
}

$src = $args[1];
$dst = __DIR__ . '/dst/' . basename($src);

$fs->mirror($src, $dst);

foreach ($finder->files()->in($dst)->name('*.php') as $file) {
    echo $file->getRelativePathname(), PHP_EOL;

    $parser = new Steve\Renamespacer\TokenParser;

    $document = $parser->parse($file->getContents());
    $tokens = $document->getTokens();

    $nsCandidates = [];

    foreach ($tokens as $token) {
        if ($token->isClassNameCandidate()) {
            if ($token->getPreviousSignificant() && $token->getPreviousSignificant()->isDeclaration()) {
                $segments = explode('_', $token->getContent());
                $class = array_pop($segments);
                $namespace = implode('\\', $segments);

                if ($namespace && !in_array($namespace, $nsCandidates)) {
                    $nsCandidates[] = $namespace;
                }

                $token->setContent($class);
            }
        }
    }

    if (count($nsCandidates) === 1) {
        $document->namespace = $nsCandidates[0];
    }

    foreach ($tokens as $token) {
        if ($token->isClassNameCandidate()) {
            if (
                $token->getPreviousSignificant() && $token->getPreviousSignificant()->isClassPrecursor() ||
                $token->getNextSignificant() && $token->getNextSignificant()->isClassPostcursor()
            ) {
                $fqcn = str_replace('_', '\\', $token->getContent());

                if ($document->namespace) {
                    $ncn = preg_replace('#^' . preg_quote($document->namespace . '\\') . '#', '', $fqcn);

                    if ($ncn && $fqcn != $ncn) {
                        $token->setContent($ncn);
                    } else {
                        $token->setContent('\\' . $fqcn);
                    }
                } else {
                    $token->setContent('\\' . $fqcn);
                }
            }
        }
    }

    $contents = implode('', $tokens);

    $nsBlock = null;

    if ($document->namespace) {
        $nsBlock = 'namespace ' . $document->namespace . ';';
    } elseif ($nsCandidates) {
        sort($nsCandidates);

        $nsBlock = "/**
 * php-renamespacer namespace candidates
 *
";

        foreach ($nsCandidates as $namespaceCandidate) {
            $nsBlock .= ' * namespace ' . $namespaceCandidate . ';' . PHP_EOL;
        }

        $nsBlock .= ' */';
    }

    if ($nsBlock) {
        $contents = preg_replace('#<\?php\s+#', "<?php\n\n$nsBlock\n\n", $contents);
    }

    $fs->dumpFile($file->getRealpath(), $contents);
}
